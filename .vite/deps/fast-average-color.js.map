{
  "version": 3,
  "sources": ["../../node_modules/fast-average-color/dist/index.esm.js"],
  "sourcesContent": ["/*! Fast Average Color | Â© 2025 Denis Seleznev | MIT License | https://github.com/fast-average-color/fast-average-color */\nfunction toHex(num) {\n    var str = num.toString(16);\n    return str.length === 1 ? '0' + str : str;\n}\nfunction arrayToHex(arr) {\n    return '#' + arr.map(toHex).join('');\n}\nfunction isDark(color) {\n    // http://www.w3.org/TR/AERT#color-contrast\n    var result = (color[0] * 299 + color[1] * 587 + color[2] * 114) / 1000;\n    return result < 128;\n}\nfunction prepareIgnoredColor(color) {\n    if (!color) {\n        return [];\n    }\n    return isRGBArray(color) ? color : [color];\n}\nfunction isRGBArray(value) {\n    return Array.isArray(value[0]);\n}\nfunction isIgnoredColor(data, index, ignoredColor) {\n    for (var i = 0; i < ignoredColor.length; i++) {\n        if (isIgnoredColorAsNumbers(data, index, ignoredColor[i])) {\n            return true;\n        }\n    }\n    return false;\n}\nfunction isIgnoredColorAsNumbers(data, index, ignoredColor) {\n    switch (ignoredColor.length) {\n        case 3:\n            // [red, green, blue]\n            if (isIgnoredRGBColor(data, index, ignoredColor)) {\n                return true;\n            }\n            break;\n        case 4:\n            // [red, green, blue, alpha]\n            if (isIgnoredRGBAColor(data, index, ignoredColor)) {\n                return true;\n            }\n            break;\n        case 5:\n            // [red, green, blue, alpha, threshold]\n            if (isIgnoredRGBAColorWithThreshold(data, index, ignoredColor)) {\n                return true;\n            }\n            break;\n        default:\n            return false;\n    }\n}\nfunction isIgnoredRGBColor(data, index, ignoredColor) {\n    // Ignore if the pixel are transparent.\n    if (data[index + 3] !== 255) {\n        return true;\n    }\n    if (data[index] === ignoredColor[0] &&\n        data[index + 1] === ignoredColor[1] &&\n        data[index + 2] === ignoredColor[2]) {\n        return true;\n    }\n    return false;\n}\nfunction isIgnoredRGBAColor(data, index, ignoredColor) {\n    if (data[index + 3] && ignoredColor[3]) {\n        return data[index] === ignoredColor[0] &&\n            data[index + 1] === ignoredColor[1] &&\n            data[index + 2] === ignoredColor[2] &&\n            data[index + 3] === ignoredColor[3];\n    }\n    // Ignore rgb components if the pixel are fully transparent.\n    return data[index + 3] === ignoredColor[3];\n}\nfunction inRange(colorComponent, ignoredColorComponent, value) {\n    return colorComponent >= (ignoredColorComponent - value) &&\n        colorComponent <= (ignoredColorComponent + value);\n}\nfunction isIgnoredRGBAColorWithThreshold(data, index, ignoredColor) {\n    var redIgnored = ignoredColor[0];\n    var greenIgnored = ignoredColor[1];\n    var blueIgnored = ignoredColor[2];\n    var alphaIgnored = ignoredColor[3];\n    var threshold = ignoredColor[4];\n    var alphaData = data[index + 3];\n    var alphaInRange = inRange(alphaData, alphaIgnored, threshold);\n    if (!alphaIgnored) {\n        return alphaInRange;\n    }\n    if (!alphaData && alphaInRange) {\n        return true;\n    }\n    if (inRange(data[index], redIgnored, threshold) &&\n        inRange(data[index + 1], greenIgnored, threshold) &&\n        inRange(data[index + 2], blueIgnored, threshold) &&\n        alphaInRange) {\n        return true;\n    }\n    return false;\n}\n\nvar DEFAULT_DOMINANT_DIVIDER = 24;\nfunction dominantAlgorithm(arr, len, options) {\n    var colorHash = {};\n    var divider = options.dominantDivider || DEFAULT_DOMINANT_DIVIDER;\n    var ignoredColor = options.ignoredColor;\n    var step = options.step;\n    var max = [0, 0, 0, 0, 0];\n    for (var i = 0; i < len; i += step) {\n        var red = arr[i];\n        var green = arr[i + 1];\n        var blue = arr[i + 2];\n        var alpha = arr[i + 3];\n        if (ignoredColor && isIgnoredColor(arr, i, ignoredColor)) {\n            continue;\n        }\n        var key = Math.round(red / divider) + ',' +\n            Math.round(green / divider) + ',' +\n            Math.round(blue / divider);\n        if (colorHash[key]) {\n            colorHash[key] = [\n                colorHash[key][0] + red * alpha,\n                colorHash[key][1] + green * alpha,\n                colorHash[key][2] + blue * alpha,\n                colorHash[key][3] + alpha,\n                colorHash[key][4] + 1\n            ];\n        }\n        else {\n            colorHash[key] = [red * alpha, green * alpha, blue * alpha, alpha, 1];\n        }\n        if (max[4] < colorHash[key][4]) {\n            max = colorHash[key];\n        }\n    }\n    var redTotal = max[0];\n    var greenTotal = max[1];\n    var blueTotal = max[2];\n    var alphaTotal = max[3];\n    var count = max[4];\n    return alphaTotal ? [\n        Math.round(redTotal / alphaTotal),\n        Math.round(greenTotal / alphaTotal),\n        Math.round(blueTotal / alphaTotal),\n        Math.round(alphaTotal / count)\n    ] : options.defaultColor;\n}\n\nfunction simpleAlgorithm(arr, len, options) {\n    var redTotal = 0;\n    var greenTotal = 0;\n    var blueTotal = 0;\n    var alphaTotal = 0;\n    var count = 0;\n    var ignoredColor = options.ignoredColor;\n    var step = options.step;\n    for (var i = 0; i < len; i += step) {\n        var alpha = arr[i + 3];\n        var red = arr[i] * alpha;\n        var green = arr[i + 1] * alpha;\n        var blue = arr[i + 2] * alpha;\n        if (ignoredColor && isIgnoredColor(arr, i, ignoredColor)) {\n            continue;\n        }\n        redTotal += red;\n        greenTotal += green;\n        blueTotal += blue;\n        alphaTotal += alpha;\n        count++;\n    }\n    return alphaTotal ? [\n        Math.round(redTotal / alphaTotal),\n        Math.round(greenTotal / alphaTotal),\n        Math.round(blueTotal / alphaTotal),\n        Math.round(alphaTotal / count)\n    ] : options.defaultColor;\n}\n\nfunction sqrtAlgorithm(arr, len, options) {\n    var redTotal = 0;\n    var greenTotal = 0;\n    var blueTotal = 0;\n    var alphaTotal = 0;\n    var count = 0;\n    var ignoredColor = options.ignoredColor;\n    var step = options.step;\n    for (var i = 0; i < len; i += step) {\n        var red = arr[i];\n        var green = arr[i + 1];\n        var blue = arr[i + 2];\n        var alpha = arr[i + 3];\n        if (ignoredColor && isIgnoredColor(arr, i, ignoredColor)) {\n            continue;\n        }\n        redTotal += red * red * alpha;\n        greenTotal += green * green * alpha;\n        blueTotal += blue * blue * alpha;\n        alphaTotal += alpha;\n        count++;\n    }\n    return alphaTotal ? [\n        Math.round(Math.sqrt(redTotal / alphaTotal)),\n        Math.round(Math.sqrt(greenTotal / alphaTotal)),\n        Math.round(Math.sqrt(blueTotal / alphaTotal)),\n        Math.round(alphaTotal / count)\n    ] : options.defaultColor;\n}\n\nfunction getDefaultColor(options) {\n    return getOption(options, 'defaultColor', [0, 0, 0, 0]);\n}\nfunction getOption(options, name, defaultValue) {\n    return (options[name] === undefined ? defaultValue : options[name]);\n}\n\nvar MIN_SIZE = 10;\nvar MAX_SIZE = 100;\nfunction isSvg(filename) {\n    return filename.search(/\\.svg(\\?|$)/i) !== -1;\n}\nfunction getOriginalSize(resource) {\n    if (isInstanceOfHTMLImageElement(resource)) {\n        var width = resource.naturalWidth;\n        var height = resource.naturalHeight;\n        // For SVG images with only viewBox attribute\n        if (!resource.naturalWidth && isSvg(resource.src)) {\n            width = height = MAX_SIZE;\n        }\n        return {\n            width: width,\n            height: height,\n        };\n    }\n    if (isInstanceOfHTMLVideoElement(resource)) {\n        return {\n            width: resource.videoWidth,\n            height: resource.videoHeight\n        };\n    }\n    if (isInstanceOfVideoFrame(resource)) {\n        return {\n            width: resource.codedWidth,\n            height: resource.codedHeight,\n        };\n    }\n    return {\n        width: resource.width,\n        height: resource.height\n    };\n}\nfunction getSrc(resource) {\n    if (isInstanceOfHTMLCanvasElement(resource)) {\n        return 'canvas';\n    }\n    if (isInstanceOfOffscreenCanvas(resource)) {\n        return 'offscreencanvas';\n    }\n    if (isInstanceOfVideoFrame(resource)) {\n        return 'videoframe';\n    }\n    if (isInstanceOfImageBitmap(resource)) {\n        return 'imagebitmap';\n    }\n    return resource.src;\n}\nfunction isInstanceOfHTMLImageElement(resource) {\n    return typeof HTMLImageElement !== 'undefined' && resource instanceof HTMLImageElement;\n}\nvar hasOffscreenCanvas = typeof OffscreenCanvas !== 'undefined';\nfunction isInstanceOfOffscreenCanvas(resource) {\n    return hasOffscreenCanvas && resource instanceof OffscreenCanvas;\n}\nfunction isInstanceOfHTMLVideoElement(resource) {\n    return typeof HTMLVideoElement !== 'undefined' && resource instanceof HTMLVideoElement;\n}\nfunction isInstanceOfVideoFrame(resource) {\n    return typeof VideoFrame !== 'undefined' && resource instanceof VideoFrame;\n}\nfunction isInstanceOfHTMLCanvasElement(resource) {\n    return typeof HTMLCanvasElement !== 'undefined' && resource instanceof HTMLCanvasElement;\n}\nfunction isInstanceOfImageBitmap(resource) {\n    return typeof ImageBitmap !== 'undefined' && resource instanceof ImageBitmap;\n}\nfunction prepareSizeAndPosition(originalSize, options) {\n    var srcLeft = getOption(options, 'left', 0);\n    var srcTop = getOption(options, 'top', 0);\n    var srcWidth = getOption(options, 'width', originalSize.width);\n    var srcHeight = getOption(options, 'height', originalSize.height);\n    var destWidth = srcWidth;\n    var destHeight = srcHeight;\n    if (options.mode === 'precision') {\n        return {\n            srcLeft: srcLeft,\n            srcTop: srcTop,\n            srcWidth: srcWidth,\n            srcHeight: srcHeight,\n            destWidth: destWidth,\n            destHeight: destHeight\n        };\n    }\n    var factor;\n    if (srcWidth > srcHeight) {\n        factor = srcWidth / srcHeight;\n        destWidth = MAX_SIZE;\n        destHeight = Math.round(destWidth / factor);\n    }\n    else {\n        factor = srcHeight / srcWidth;\n        destHeight = MAX_SIZE;\n        destWidth = Math.round(destHeight / factor);\n    }\n    if (destWidth > srcWidth || destHeight > srcHeight ||\n        destWidth < MIN_SIZE || destHeight < MIN_SIZE) {\n        destWidth = srcWidth;\n        destHeight = srcHeight;\n    }\n    return {\n        srcLeft: srcLeft,\n        srcTop: srcTop,\n        srcWidth: srcWidth,\n        srcHeight: srcHeight,\n        destWidth: destWidth,\n        destHeight: destHeight\n    };\n}\nvar isWebWorkers = typeof window === 'undefined';\nfunction makeCanvas() {\n    if (isWebWorkers) {\n        return hasOffscreenCanvas ? new OffscreenCanvas(1, 1) : null;\n    }\n    return document.createElement('canvas');\n}\n\nvar ERROR_PREFIX = 'FastAverageColor: ';\nfunction getError(message) {\n    return Error(ERROR_PREFIX + message);\n}\nfunction outputError(error, silent) {\n    if (!silent) {\n        console.error(error);\n    }\n}\n\nvar FastAverageColor = /** @class */ (function () {\n    function FastAverageColor() {\n        this.canvas = null;\n        this.ctx = null;\n    }\n    FastAverageColor.prototype.getColorAsync = function (resource, options) {\n        if (!resource) {\n            return Promise.reject(getError('call .getColorAsync() without resource'));\n        }\n        if (typeof resource === 'string') {\n            // Web workers\n            if (typeof Image === 'undefined') {\n                return Promise.reject(getError('resource as string is not supported in this environment'));\n            }\n            var img = new Image();\n            img.crossOrigin = options && options.crossOrigin || '';\n            img.src = resource;\n            return this.bindImageEvents(img, options);\n        }\n        else if (isInstanceOfHTMLImageElement(resource) && !resource.complete) {\n            return this.bindImageEvents(resource, options);\n        }\n        else {\n            var result = this.getColor(resource, options);\n            return result.error ? Promise.reject(result.error) : Promise.resolve(result);\n        }\n    };\n    /**\n     * Get the average color from images, videos and canvas.\n     */\n    FastAverageColor.prototype.getColor = function (resource, options) {\n        options = options || {};\n        var defaultColor = getDefaultColor(options);\n        if (!resource) {\n            var error = getError('call .getColor() without resource');\n            outputError(error, options.silent);\n            return this.prepareResult(defaultColor, error);\n        }\n        var originalSize = getOriginalSize(resource);\n        var size = prepareSizeAndPosition(originalSize, options);\n        if (!size.srcWidth || !size.srcHeight || !size.destWidth || !size.destHeight) {\n            var error = getError(\"incorrect sizes for resource \\\"\".concat(getSrc(resource), \"\\\"\"));\n            outputError(error, options.silent);\n            return this.prepareResult(defaultColor, error);\n        }\n        if (!this.canvas) {\n            this.canvas = makeCanvas();\n            if (!this.canvas) {\n                var error = getError('OffscreenCanvas is not supported in this browser');\n                outputError(error, options.silent);\n                return this.prepareResult(defaultColor, error);\n            }\n        }\n        if (!this.ctx) {\n            this.ctx = this.canvas.getContext('2d', { willReadFrequently: true });\n            if (!this.ctx) {\n                var error = getError('Canvas Context 2D is not supported in this browser');\n                outputError(error, options.silent);\n                return this.prepareResult(defaultColor);\n            }\n            this.ctx.imageSmoothingEnabled = false;\n        }\n        this.canvas.width = size.destWidth;\n        this.canvas.height = size.destHeight;\n        try {\n            this.ctx.clearRect(0, 0, size.destWidth, size.destHeight);\n            this.ctx.drawImage(resource, size.srcLeft, size.srcTop, size.srcWidth, size.srcHeight, 0, 0, size.destWidth, size.destHeight);\n            var bitmapData = this.ctx.getImageData(0, 0, size.destWidth, size.destHeight).data;\n            return this.prepareResult(this.getColorFromArray4(bitmapData, options));\n        }\n        catch (originalError) {\n            var error = getError(\"security error (CORS) for resource \".concat(getSrc(resource), \".\\nDetails: https://developer.mozilla.org/en/docs/Web/HTML/CORS_enabled_image\"));\n            outputError(error, options.silent);\n            if (!options.silent) {\n                console.error(originalError);\n            }\n            return this.prepareResult(defaultColor, error);\n        }\n    };\n    /**\n     * Get the average color from a array when 1 pixel is 4 bytes.\n     */\n    FastAverageColor.prototype.getColorFromArray4 = function (arr, options) {\n        options = options || {};\n        var bytesPerPixel = 4;\n        var arrLength = arr.length;\n        var defaultColor = getDefaultColor(options);\n        if (arrLength < bytesPerPixel) {\n            return defaultColor;\n        }\n        var len = arrLength - arrLength % bytesPerPixel;\n        var step = (options.step || 1) * bytesPerPixel;\n        var algorithm;\n        switch (options.algorithm || 'sqrt') {\n            case 'simple':\n                algorithm = simpleAlgorithm;\n                break;\n            case 'sqrt':\n                algorithm = sqrtAlgorithm;\n                break;\n            case 'dominant':\n                algorithm = dominantAlgorithm;\n                break;\n            default:\n                throw getError(\"\".concat(options.algorithm, \" is unknown algorithm\"));\n        }\n        return algorithm(arr, len, {\n            defaultColor: defaultColor,\n            ignoredColor: prepareIgnoredColor(options.ignoredColor),\n            step: step,\n            dominantDivider: options.dominantDivider,\n        });\n    };\n    /**\n     * Get color data from value ([r, g, b, a]).\n     */\n    FastAverageColor.prototype.prepareResult = function (value, error) {\n        var rgb = value.slice(0, 3);\n        var rgba = [value[0], value[1], value[2], value[3] / 255];\n        var isDarkColor = isDark(value);\n        return {\n            value: [value[0], value[1], value[2], value[3]],\n            rgb: 'rgb(' + rgb.join(',') + ')',\n            rgba: 'rgba(' + rgba.join(',') + ')',\n            hex: arrayToHex(rgb),\n            hexa: arrayToHex(value),\n            isDark: isDarkColor,\n            isLight: !isDarkColor,\n            error: error,\n        };\n    };\n    /**\n     * Destroy the instance.\n     */\n    FastAverageColor.prototype.destroy = function () {\n        if (this.canvas) {\n            this.canvas.width = 1;\n            this.canvas.height = 1;\n            this.canvas = null;\n        }\n        this.ctx = null;\n    };\n    FastAverageColor.prototype.bindImageEvents = function (resource, options) {\n        var _this = this;\n        return new Promise(function (resolve, reject) {\n            var onload = function () {\n                unbindEvents();\n                var result = _this.getColor(resource, options);\n                if (result.error) {\n                    reject(result.error);\n                }\n                else {\n                    resolve(result);\n                }\n            };\n            var onerror = function () {\n                unbindEvents();\n                reject(getError(\"Error loading image \\\"\".concat(resource.src, \"\\\"\")));\n            };\n            var onabort = function () {\n                unbindEvents();\n                reject(getError(\"Image \\\"\".concat(resource.src, \"\\\" loading aborted\")));\n            };\n            var unbindEvents = function () {\n                resource.removeEventListener('load', onload);\n                resource.removeEventListener('error', onerror);\n                resource.removeEventListener('abort', onabort);\n            };\n            resource.addEventListener('load', onload);\n            resource.addEventListener('error', onerror);\n            resource.addEventListener('abort', onabort);\n        });\n    };\n    return FastAverageColor;\n}());\n\nexport { FastAverageColor };\n"],
  "mappings": "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",
  "names": ["FastAverageColor"]
}
